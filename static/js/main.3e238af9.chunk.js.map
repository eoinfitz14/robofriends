{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAkBeA,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEjB,OACI,yBAAKC,UAAU,OACX,2BACCA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBAEZC,SAAUJ,MCIPK,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACxB,OACI,yBAAKP,UAAU,uDACX,yBAAKQ,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCcPI,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OAEI,6BAGQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,cCJ9BU,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,UACnEJ,EAAMK,WCmBJC,G,kBAtBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHA,E,+EAQAC,EAAOC,GACrBC,KAAKJ,MAAM,CAAEC,UAAU,M,+BAIvB,OAAGG,KAAKJ,MAAMC,SACH,uDAGAG,KAAKX,MAAMK,a,GAlBFO,cCwDbC,E,YAhDX,aAAc,IAAD,8BACT,+CAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,SAd3C,EAAKZ,MAAQ,CACTb,OAAQ,GACRuB,YAAa,IAJR,E,iFAQQ,IAAD,OAEhBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAAEtB,OAAQ8B,S,+BAOnC,IAAD,OAIEC,EAAiBd,KAAKJ,MAAMb,OAAOgC,QAAO,SAAAC,GAC5C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEpE,OAAgC,IAA7BjB,KAAKJ,MAAMb,OAAOoC,OAEb,wBAAI/C,UAAU,MAAd,WAKA,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWD,aAAc6B,KAAKG,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,OAAQ+B,W,GAxC5Bb,aCGEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.3e238af9.chunk.js","sourcesContent":["import React from 'react';\n \n// component\nconst SearchBox = ({ searchChange }) => {\n\n    return (\n        <div className='pa2'>\n            <input\n             className='pa3 ba b--green bg-lightest-blue'\n             type='search'\n             placeholder='search robots'\n             // onChange is a HTML listener that looks for an event\n             onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;"," import React from 'react'; // React is needed to write JSX!!! i.e the html code seen in the function below!! NB!!!!!!!!!\n\n //const Card = (props) => {\n // neater verions:\n const Card = ({ name, email, id }) => {\n      return (\n          <div className='tc bg-light-green dib br3 pa3 ma2 bw2 grow shadow-5'>\n              <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n              <div>\n                  <h2>{name}</h2>\n                  <p>{email}</p>\n              </div>\n          </div>\n      );\n }\n\n export default Card; ","import React from 'react'; // React is needed to write JSX!!! i.e the html code seen in the function below!! NB!!!!!!!!!\nimport Card from './Card'; \n\nconst CardList = ({ robots }) => {\n    return (\n        //note we wrap cardComponents in curlies because its JS\n        <div>\n            {\n                //note we can use map or forEach here. Map is a little better.\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n// component\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '0.5px solid black', height: '400px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react'; // React is needed to write JSX!!! i.e the html code seen in the function below!! NB!!!!!!!!!\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    //kind of like a try/catch. Lifecycle hook that's triggered at any error\n    componentDidCatch(error, info){\n        this.state({ hasError: true})\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Ooops. That's not good!</h1>\n        }\n        else{\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react'; // React is needed to write JSX!!! i.e the html code seen in the function below!! NB!!!!!!!!!\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList'; \nimport Scroll from '../components/Scroll';\nimport './App.css'; \nimport '../components/ErrorBoundary';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n// container or smart component\nclass App extends Component {\n    constructor(){\n        super(); // reminder: super() calls the constructor of component and so this.state can be used\n        this.state = {\n            robots: [] ,\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        //http fetch and  convert the response string to json\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => {this.setState({ robots: users})});    \n    }\n\n    onSearchChange = (event) =>  {\n        this.setState({ searchfield : event.target.value})\n    }\n\n    render(){\n        // can get rid of this.state at the start of this.state.robots or this.state.searchfield and have:\n        // const { robots, searchfield } = this.state\n        // check out video 213 around 6 mins ^^^^ \n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        if(this.state.robots.length === 0){\n            return(\n                <h1 className='tc'>LOADING</h1>\n            );\n        }\n        else{\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>Robofriends</h1>\n                    {/* note that onSearchChange has no brackets when calling the function */}\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots }/> \n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    } \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n// note that robots is passed to CardList and so we can access it in the CardList class using props or destructuring i.e using {}\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}